name: CI - Code Quality and Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black flake8 mypy
    
    - name: Code formatting with Black
      run: |
        black --check --diff src/ pages/ --exclude="venv|__pycache__|.git"
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true
    
    - name: Test imports and basic functionality
      run: |
        python -c "
        import sys
        sys.path.append('src')
        
        # Test core imports
        try:
            from data.feature_store import FeatureStore
            from data.cache_manager import CacheManager
            from business.ab_testing import ABTestingManager
            from validation.model_validator import ModelValidator
            from config.config_manager import ConfigManager
            print('‚úÖ All core imports successful')
        except Exception as e:
            print(f'‚ùå Import error: {e}')
            print('‚ö†Ô∏è Some imports may fail without data - this is expected')
        
        # Test configuration system
        try:
            from config.config_manager import get_config
            config = get_config()
            print('‚úÖ Configuration system test passed')
        except Exception as e:
            print(f'‚ùå Config error: {e}')
        "
    
    - name: Test configuration files
      run: |
        python -c "
        import json
        from pathlib import Path
        
        # Check if config exists
        config_path = Path('config/etl_config.json')
        if config_path.exists():
            with open(config_path) as f:
                config = json.load(f)
            print('‚úÖ ETL config valid')
        else:
            print('‚ö†Ô∏è ETL config not found - will use defaults')
        "
    
    - name: Validate project structure
      run: |
        python -c "
        from pathlib import Path
        
        required_dirs = [
            'src/data', 'src/business', 'src/monitoring', 'src/validation',
            'src/config', 'src/deployment', 'data/processed', 'pages'
        ]
        
        for dir_path in required_dirs:
            if Path(dir_path).exists():
                print(f'‚úÖ {dir_path} exists')
            else:
                print(f'‚ùå {dir_path} missing')
        "

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan with bandit
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll || true
      continue-on-error: true
    
    - name: Check for secrets
      run: |
        # Basic check for potential secrets (excluding test data)
        echo "üîç Checking for potential secrets..."
        if grep -r -i "password\|secret\|key\|token" src/ --exclude-dir=__pycache__ | grep -v -i "test\|example\|dummy\|template\|config\|jwt_secret\|api_key" || true; then
          echo "‚ö†Ô∏è Potential secrets found - please review above results"
          echo "Note: Configuration templates and examples are expected"
        else
          echo "‚úÖ No obvious secrets detected"
        fi
      continue-on-error: true

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation
      run: |
        # Check for README updates
        if [ -f README.md ]; then
          echo "‚úÖ README.md exists"
          if grep -q "MovieLens" README.md; then
            echo "‚úÖ README contains project information"
          fi
        fi
        
        # Check for GAMEPLAN
        if [ -f GAMEPLAN.md ]; then
          echo "‚úÖ GAMEPLAN.md exists"
        fi
    
    - name: Validate markdown files
      run: |
        pip install markdown
        python -c "
        import markdown
        from pathlib import Path
        
        md_files = list(Path('.').glob('*.md'))
        for md_file in md_files:
            try:
                with open(md_file) as f:
                    content = f.read()
                markdown.markdown(content)
                print(f'‚úÖ {md_file} is valid markdown')
            except Exception as e:
                print(f'‚ùå {md_file} has markdown errors: {e}')
        "

  notify:
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, documentation]
    if: always()
    steps:
    - name: Report status
      run: |
        echo "üîç CI Pipeline completed"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"  
        echo "Documentation: ${{ needs.documentation.result }}"